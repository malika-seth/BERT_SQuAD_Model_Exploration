###########################################################
#THIS MODULE IMPORTS THE squad2.csv file, which contains the
#list of questions and their IDS generated by LAHMA.
#Produces file train-v2.1-full.json in format compatible fo
#SQUAD QA.
###########################################################

import numpy as np
import pandas as pd
import json
import re

#Import CSCV file
d = pd.read_csv("squad2.csv")
d.shape


def strip_extra_char(s):
    """
    Return a processed string stripped of return characters
    """
    return s.strip('\n')

#Standardize column names
d.columns = ['topic','num','para','id','q','m']
d.head(5)


#Import each row and process information
num_rows, _ = d.shape
data_list = list()
topic_dict = dict()
for idx, r in d.iterrows():
    if not pd.isna(r.topic):
        #First append ;
        print("Old topic:",topic_dict)
        data_list.append(topic_dict)
        #Then reintialize;
        topic_dict = dict()
        topic_dict["title"] = r.topic
        topic_dict["paragraphs"] = list()
        
    if r.num > 0.0:
        para_content = r.para
        qas_list = list()
        
    #Everytime the question is NAN updat the list of questions
    if pd.isna(r.q) or idx == num_rows-1 :
        print("paragraph over. Update!\n")
        topic_dict["paragraphs"].append({"qas":qas_list,"context":strip_extra_char(para_content)})
        if idx==num_rows - 1:
            data_list.append(topic_dict)
#         print(topic_dict)
    else:
        #Each pagraph has its own dictionary of questions
        question_dict = dict()
        question_dict["plausible_answers"] = []
        question_dict["question"] = strip_extra_char(r.q)
        question_dict["id"] = strip_extra_char(r.id)
        question_dict["answers"] = list()
        question_dict["is_impossible"] = True
        #Add them to the list of questions
        qas_list.append(question_dict)
    
data_list = data_list[1:]


for topic in data_list: 
    print(topic['title'])
    
# print(data_list[0])

#Apppend METADATA
final_dict = {"version":"v2.1", "data":data_list}


# with open('squad3_full.json',"w") as json_file:
#     json.dump(final_dict, json_file)


# ## APPEND THE NEW DATA TO THE END OF THE TRAINING SET
with open("train-v2.0.json","r") as train:
    o = json.load(train)
    
#Change metadata
o["version"] = "v2.1"
# len(o["data"])
o["data"] = o["data"] + data_list


# In[83]:


print("The new list of training data has ",len(o["data"]), "items.")

with open("train-v2.1-full.json","w") as newtrain:
    json.dump(o,newtrain)
    
print("COMPLETED! NO ISSUES!")

###END OF CODE####




